#!/bin/bash

# This script print a range of numbers
# Usage: count [r] [-b n] [-s n] stop
# -b gives the number to begin with (default: 0)
# -r reverse the count
# -s sets step size (default: 1)
# counting will stop at stop.

usage () {
	cat <<END
count [-r] [-b n] [-s n] stop

Print each number up to stop, beginning at 0
	-b: number to begin with default: 0)
	-h: show this help message
	-r: reverses the count
	-s: sets step size (default: 1)
END
}

# function to handle erros.
# First argument: error message to print
# Second argument: exit code to exit script with

error() {
        echo "Error: $1"
	usage
	exit $2
} >&2

# Function returns 0 when it's argument is a number
# error message will be in $num_error

isnum () {
	echo "Inside isnum func"
	declare -r num_re='^[0-9]+$'
	declare -r octal_re='^0(.+)'
	num_error="ok"
	if [[ $1 =~ $num_re ]]; then
		if [[ $1 =~ $octal_re ]]; then
			num_error="$1 is not a number, did you mean ${BASH_REMATCH[1]}?"
			return 1
		fi
	else
		num_erro="$1 is not a number"
		return 1
	fi

	return 0
}

declare reverse=""
declare -i begin=0
declare -i step=1

while getopts ":hb:s:r" opt; do
	case $opt in
		r)
			reverse="yes"
			;;
		b)
			echo "Inside b"
			isnum ${OPTARG} || error "${num_error}" 1
#			[[ ${OPTARG} =~ ^[0-9]+$ ]] || { echo "${OPTARG} is not a number" >&2; exit 1; }
			start="${OPTARG}"
			;;
		h)
			usage
			;;
		s)
			echo "Inside s"
			isnum ${OPTARG} || error "${num_error}" 1
#			[[ ${OPTARG} =~ ^[0-9]+$ ]] || { echo "${OPTARG} is not a number" >&2; exit 1; }
			step="${OPTARG}"
			;;
		\?)
			exit 1
			;;
	esac
done

shift $(( OPTIND -1 ))

[[ $1 ]] || { echo "missing an argument" >&2; exit 1; }

declare end="$1"

if [[ ! $reverse ]]; then
	for (( i=start; i <= end; i+=step )); do
		echo $i
	done
else
	for (( i=end; i >= start; i-=step )); do
                echo $i
        done
fi

exit 0


